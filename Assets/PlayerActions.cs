//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""TouchControlls"",
            ""id"": ""9ca7faf1-8e70-43ea-b2a6-39ffb5916e4f"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""f405b744-78b7-4f30-8255-425d0dbdbce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""d803cb83-e992-4baa-b049-66efc5505458"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ebc7484-826f-4450-8861-ab0243d70088"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""819b013f-4e61-4bf7-a603-66cd1df7121e"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchControlls
        m_TouchControlls = asset.FindActionMap("TouchControlls", throwIfNotFound: true);
        m_TouchControlls_Select = m_TouchControlls.FindAction("Select", throwIfNotFound: true);
        m_TouchControlls_Drag = m_TouchControlls.FindAction("Drag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchControlls
    private readonly InputActionMap m_TouchControlls;
    private ITouchControllsActions m_TouchControllsActionsCallbackInterface;
    private readonly InputAction m_TouchControlls_Select;
    private readonly InputAction m_TouchControlls_Drag;
    public struct TouchControllsActions
    {
        private @PlayerActions m_Wrapper;
        public TouchControllsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_TouchControlls_Select;
        public InputAction @Drag => m_Wrapper.m_TouchControlls_Drag;
        public InputActionMap Get() { return m_Wrapper.m_TouchControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchControllsActions set) { return set.Get(); }
        public void SetCallbacks(ITouchControllsActions instance)
        {
            if (m_Wrapper.m_TouchControllsActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_TouchControllsActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_TouchControllsActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_TouchControllsActionsCallbackInterface.OnSelect;
                @Drag.started -= m_Wrapper.m_TouchControllsActionsCallbackInterface.OnDrag;
                @Drag.performed -= m_Wrapper.m_TouchControllsActionsCallbackInterface.OnDrag;
                @Drag.canceled -= m_Wrapper.m_TouchControllsActionsCallbackInterface.OnDrag;
            }
            m_Wrapper.m_TouchControllsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
            }
        }
    }
    public TouchControllsActions @TouchControlls => new TouchControllsActions(this);
    public interface ITouchControllsActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
    }
}
